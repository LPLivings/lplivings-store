name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: 'NO'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: prod

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Validate deployment confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY" ]; then
          echo "‚ùå Production deployment not confirmed. Please type 'DEPLOY' to proceed."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"

  deploy-backend:
    runs-on: ubuntu-latest
    environment: production
    needs: [validate-deployment]
    if: always() && (needs.validate-deployment.result == 'success' || github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: |
        cd backend
        sam build

    - name: Deploy to AWS
      run: |
        cd backend
        sam deploy \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET_PROD }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            GoogleClientId="${{ secrets.GOOGLE_CLIENT_ID_PROD }}" \
            GoogleSheetsId="${{ secrets.GOOGLE_SHEETS_ID_PROD }}" \
            GoogleCredentials="${{ secrets.GOOGLE_CREDENTIALS_PROD }}" \
          --no-confirm-changeset

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd backend
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.api-url }}" > .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_PROD }}" >> .env

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync build/ s3://lplivings-prod-frontend --delete

    - name: Output deployment URLs
      run: |
        echo "üöÄ Production Deployment Complete!"
        echo "Frontend URL: http://lplivings-prod-frontend.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Custom Domain: https://lplivings.selfcaretech.com (after DNS setup)"
        echo "Backend API: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "API Custom Domain: https://api.selfcaretech.com (after DNS setup)"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful!"
        else
          echo "‚ùå Production deployment failed!"
          exit 1
        fi