name: Deploy to Development

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: |
        cd backend
        sam build

    - name: Deploy to AWS
      run: |
        cd backend
        sam deploy \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            GoogleClientId="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GoogleSheetsId="${{ secrets.GOOGLE_SHEETS_ID }}" \
            GoogleCredentials="${{ secrets.GOOGLE_CREDENTIALS }}" \
          --no-confirm-changeset

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd backend
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.api-url }}" > .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create S3 bucket for frontend
      run: |
        BUCKET_NAME="lplivings-frontend-${{ env.ENVIRONMENT }}-$(date +%s)"
        echo "FRONTEND_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
        
        # Create bucket
        aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
        
        # Configure for static website hosting
        aws s3 website s3://$BUCKET_NAME --index-document index.html --error-document index.html
        
        # Remove public access block
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration \
          BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
        
        # Apply public read policy
        cat > bucket-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
                }
            ]
        }
        EOF
        
        aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync build/ s3://${{ env.FRONTEND_BUCKET }} --delete

    - name: Output deployment URLs
      run: |
        echo "ðŸš€ Development Deployment Complete!"
        echo "Frontend URL: http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Backend API: ${{ needs.deploy-backend.outputs.api-url }}"