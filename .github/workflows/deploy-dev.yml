name: Deploy to Development

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Debug environment
      run: |
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Has AWS Access Key: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
        echo "Has AWS Secret Key: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        echo "Has SAM Bucket: ${{ secrets.SAM_DEPLOYMENT_BUCKET != '' }}"
        echo "Has Google Client ID: ${{ secrets.GOOGLE_CLIENT_ID != '' }}"
        echo "Has Google Sheets ID: ${{ secrets.GOOGLE_SHEETS_ID != '' }}"
        echo "Has Google Credentials: ${{ secrets.GOOGLE_CREDENTIALS != '' }}"

    - name: Build SAM application
      run: |
        cd backend
        sam build

    - name: Deploy to AWS
      env:
        GOOGLE_CREDS: ${{ secrets.GOOGLE_CREDENTIALS }}
        STRIPE_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      run: |
        cd backend
        # Use environment variables to avoid parameter parsing issues
        sam deploy \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            "Environment=${{ env.ENVIRONMENT }}" \
            "GoogleClientId=${{ secrets.GOOGLE_CLIENT_ID }}" \
            "GoogleSheetsId=${{ secrets.GOOGLE_SHEETS_ID }}" \
            "GoogleCredentials=${GOOGLE_CREDS:-{}}" \
            "StripeSecretKey=${STRIPE_KEY:-placeholder-stripe-key}" \
          --no-confirm-changeset

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd backend
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.api-url }}" > .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync build/ s3://lplivings-dev-frontend --delete

    - name: Output deployment URLs
      run: |
        echo "ðŸš€ Development Deployment Complete!"
        echo "Frontend URL: http://lplivings-dev-frontend.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Custom Domain: https://lplivings-dev.selfcaretech.com (after DNS setup)"
        echo "Backend API: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "API Custom Domain: https://api-dev.selfcaretech.com (after DNS setup)"