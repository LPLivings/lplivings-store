name: Deploy to Development

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Check required secrets
      run: |
        echo "🔍 Checking deployment requirements..."
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        
        # Check each secret individually
        MISSING_SECRETS=""
        
        if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS AWS_ACCESS_KEY_ID"
        fi
        
        if [[ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS AWS_SECRET_ACCESS_KEY"
        fi
        
        if [[ -z "${{ secrets.SAM_DEPLOYMENT_BUCKET }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS SAM_DEPLOYMENT_BUCKET"
        fi
        
        if [[ -z "${{ secrets.GOOGLE_CLIENT_ID }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS GOOGLE_CLIENT_ID"
        fi
        
        if [[ -z "${{ secrets.GOOGLE_SHEETS_ID }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS GOOGLE_SHEETS_ID"
        fi
        
        if [[ -z "${{ secrets.GOOGLE_CREDENTIALS }}" ]]; then
          MISSING_SECRETS="$MISSING_SECRETS GOOGLE_CREDENTIALS"
        fi
        
        # Report status
        echo "✅ Available secrets:"
        [[ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && echo "  - AWS_ACCESS_KEY_ID"
        [[ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]] && echo "  - AWS_SECRET_ACCESS_KEY"
        [[ -n "${{ secrets.SAM_DEPLOYMENT_BUCKET }}" ]] && echo "  - SAM_DEPLOYMENT_BUCKET"
        [[ -n "${{ secrets.GOOGLE_CLIENT_ID }}" ]] && echo "  - GOOGLE_CLIENT_ID"
        [[ -n "${{ secrets.GOOGLE_SHEETS_ID }}" ]] && echo "  - GOOGLE_SHEETS_ID"
        [[ -n "${{ secrets.GOOGLE_CREDENTIALS }}" ]] && echo "  - GOOGLE_CREDENTIALS"
        [[ -n "${{ secrets.STRIPE_SECRET_KEY }}" ]] && echo "  - STRIPE_SECRET_KEY (optional)"
        
        if [[ -n "$MISSING_SECRETS" ]]; then
          echo ""
          echo "❌ Missing required secrets:$MISSING_SECRETS"
          echo ""
          echo "📋 To fix this:"
          echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "2. Add the missing secrets"
          echo "3. Check GITHUB-SECRETS-SETUP.md for detailed instructions"
          echo ""
          echo "🔄 For now, continuing with placeholders..."
        else
          echo ""
          echo "✅ All required secrets are configured!"
        fi

    - name: Build SAM application
      run: |
        cd backend
        sam build

    - name: Deploy to AWS
      run: |
        cd backend
        
        # Set defaults for missing secrets
        GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
        GOOGLE_SHEETS_ID="${{ secrets.GOOGLE_SHEETS_ID }}"
        GOOGLE_CREDENTIALS="${{ secrets.GOOGLE_CREDENTIALS }}"
        STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}"
        SAM_BUCKET="${{ secrets.SAM_DEPLOYMENT_BUCKET }}"
        
        # Use placeholders if secrets are missing
        [[ -z "$GOOGLE_CLIENT_ID" ]] && GOOGLE_CLIENT_ID="placeholder-client-id"
        [[ -z "$GOOGLE_SHEETS_ID" ]] && GOOGLE_SHEETS_ID="placeholder-sheets-id"
        [[ -z "$GOOGLE_CREDENTIALS" ]] && GOOGLE_CREDENTIALS="{}"
        [[ -z "$STRIPE_SECRET_KEY" ]] && STRIPE_SECRET_KEY="placeholder-stripe-key"
        [[ -z "$SAM_BUCKET" ]] && SAM_BUCKET="default-sam-bucket"
        
        echo "🚀 Deploying with SAM..."
        sam deploy \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --s3-bucket "$SAM_BUCKET" \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            "Environment=${{ env.ENVIRONMENT }}" \
            "GoogleClientId=$GOOGLE_CLIENT_ID" \
            "GoogleSheetsId=$GOOGLE_SHEETS_ID" \
            "GoogleCredentials=$GOOGLE_CREDENTIALS" \
            "StripeSecretKey=$STRIPE_SECRET_KEY" \
          --no-confirm-changeset

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd backend
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.api-url }}" > .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync build/ s3://lplivings-dev-frontend --delete

    - name: Output deployment URLs
      run: |
        echo "🚀 Development Deployment Complete!"
        echo "Frontend URL: http://lplivings-dev-frontend.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Custom Domain: https://lplivings-dev.selfcaretech.com (after DNS setup)"
        echo "Backend API: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "API Custom Domain: https://api-dev.selfcaretech.com (after DNS setup)"