name: Deploy to Development

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Check required secrets
      env:
        HAS_AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        HAS_AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}
        HAS_SAM_BUCKET: ${{ secrets.SAM_DEPLOYMENT_BUCKET != '' }}
        HAS_GOOGLE_CLIENT: ${{ secrets.GOOGLE_CLIENT_ID != '' }}
        HAS_GOOGLE_SHEETS: ${{ secrets.GOOGLE_SHEETS_ID != '' }}
        HAS_GOOGLE_CREDS: ${{ secrets.GOOGLE_CREDENTIALS != '' }}
        HAS_STRIPE_KEY: ${{ secrets.STRIPE_SECRET_KEY != '' }}
      run: |
        echo "🔍 Checking deployment requirements..."
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo ""
        
        # Check secrets using environment variables to avoid syntax issues
        MISSING_SECRETS=""
        
        [[ "$HAS_AWS_KEY" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS AWS_ACCESS_KEY_ID"
        [[ "$HAS_AWS_SECRET" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS AWS_SECRET_ACCESS_KEY"
        [[ "$HAS_SAM_BUCKET" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS SAM_DEPLOYMENT_BUCKET"
        [[ "$HAS_GOOGLE_CLIENT" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS GOOGLE_CLIENT_ID"
        [[ "$HAS_GOOGLE_SHEETS" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS GOOGLE_SHEETS_ID"
        [[ "$HAS_GOOGLE_CREDS" != "true" ]] && MISSING_SECRETS="$MISSING_SECRETS GOOGLE_CREDENTIALS"
        
        # Report available secrets
        echo "✅ Available secrets:"
        [[ "$HAS_AWS_KEY" == "true" ]] && echo "  - AWS_ACCESS_KEY_ID"
        [[ "$HAS_AWS_SECRET" == "true" ]] && echo "  - AWS_SECRET_ACCESS_KEY"
        [[ "$HAS_SAM_BUCKET" == "true" ]] && echo "  - SAM_DEPLOYMENT_BUCKET"
        [[ "$HAS_GOOGLE_CLIENT" == "true" ]] && echo "  - GOOGLE_CLIENT_ID"
        [[ "$HAS_GOOGLE_SHEETS" == "true" ]] && echo "  - GOOGLE_SHEETS_ID"
        [[ "$HAS_GOOGLE_CREDS" == "true" ]] && echo "  - GOOGLE_CREDENTIALS"
        [[ "$HAS_STRIPE_KEY" == "true" ]] && echo "  - STRIPE_SECRET_KEY (optional)"
        
        # Report missing secrets
        if [[ -n "${MISSING_SECRETS// }" ]]; then
          echo ""
          echo "❌ Missing required secrets:$MISSING_SECRETS"
          echo ""
          echo "📋 To fix this:"
          echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "2. Add the missing secrets"
          echo "3. Check GITHUB-SECRETS-SETUP.md for detailed instructions"
          echo "4. Or run: ./setup-github-secrets.sh"
          echo ""
          echo "🔄 Continuing with placeholders for missing secrets..."
        else
          echo ""
          echo "✅ All required secrets are configured!"
        fi

    - name: Build SAM application
      run: |
        cd backend
        sam build

    - name: Create deployment parameters
      env:
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        SAM_BUCKET: ${{ secrets.SAM_DEPLOYMENT_BUCKET }}
      run: |
        cd backend
        
        # Create parameter file to avoid shell interpretation issues
        cat > deploy-params.txt << 'EOF'
Environment=${{ env.ENVIRONMENT }}
GoogleClientId=${GOOGLE_CLIENT_ID:-placeholder-client-id}
GoogleSheetsId=${GOOGLE_SHEETS_ID:-placeholder-sheets-id}
StripeSecretKey=${STRIPE_SECRET_KEY:-placeholder-stripe-key}
EOF
        
        # Handle Google Credentials separately to avoid multiline issues
        if [[ -n "$GOOGLE_CREDENTIALS" ]]; then
          # Write Google credentials to a temporary file and compress to single line
          echo "$GOOGLE_CREDENTIALS" | jq -c . >> /tmp/google_creds.json 2>/dev/null || echo "{}" > /tmp/google_creds.json
          echo "GoogleCredentials=$(cat /tmp/google_creds.json)" >> deploy-params.txt
        else
          echo "GoogleCredentials={}" >> deploy-params.txt
        fi
        
        echo "📋 Deployment parameters created:"
        cat deploy-params.txt

    - name: Deploy to AWS
      env:
        SAM_BUCKET: ${{ secrets.SAM_DEPLOYMENT_BUCKET }}
      run: |
        cd backend
        
        # Set SAM bucket with fallback
        BUCKET="${SAM_BUCKET:-default-sam-bucket}"
        
        # Convert parameter file to SAM format
        PARAMS=""
        while IFS= read -r line; do
          [[ -n "$line" ]] && PARAMS="$PARAMS $line"
        done < deploy-params.txt
        
        echo "🚀 Deploying with SAM..."
        echo "Parameters: $PARAMS"
        
        sam deploy \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --s3-bucket "$BUCKET" \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides $PARAMS \
          --no-confirm-changeset

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd backend
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    outputs:
      api-url: ${{ steps.get-api-url.outputs.api-url }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Create environment file
      run: |
        cd frontend
        echo "REACT_APP_API_URL=${{ needs.deploy-backend.outputs.api-url }}" > .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync build/ s3://lplivings-dev-frontend --delete

    - name: Output deployment URLs
      run: |
        echo "🚀 Development Deployment Complete!"
        echo "Frontend URL: http://lplivings-dev-frontend.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "Custom Domain: https://lplivings-dev.selfcaretech.com (after DNS setup)"
        echo "Backend API: ${{ needs.deploy-backend.outputs.api-url }}"
        echo "API Custom Domain: https://api-dev.selfcaretech.com (after DNS setup)"