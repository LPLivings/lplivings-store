name: Deploy E-Commerce App

on:
  push:
    branches:
      - main
      - prod
  # Note: dev branch deployment handled by deploy-dev.yml

env:
  AWS_REGION: us-east-1

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Cache SAM CLI
        uses: actions/cache@v3
        with:
          path: ~/.local/bin/sam
          key: sam-cli-${{ runner.os }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          if ! command -v sam &> /dev/null; then
            pip install aws-sam-cli
          fi

      - name: Validate required secrets
        run: |
          MISSING_SECRETS=""
          [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && MISSING_SECRETS="$MISSING_SECRETS AWS_ACCESS_KEY_ID"
          [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && MISSING_SECRETS="$MISSING_SECRETS AWS_SECRET_ACCESS_KEY"
          [ -z "${{ secrets.SAM_DEPLOYMENT_BUCKET }}" ] && MISSING_SECRETS="$MISSING_SECRETS SAM_DEPLOYMENT_BUCKET"
          
          if [ ! -z "$MISSING_SECRETS" ]; then
            echo "ERROR: Missing required secrets: $MISSING_SECRETS"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup AWS Secrets Manager
        run: |
          # Create or update secrets in AWS Secrets Manager
          # Only create secrets if they don't exist and we have the values
          
          create_secret_if_not_exists() {
            local secret_name=$1
            local secret_value=$2
            
            if [ -n "$secret_value" ] && [ "$secret_value" != "" ]; then
              # Check if secret exists
              if aws secretsmanager describe-secret --secret-id "$secret_name" >/dev/null 2>&1; then
                echo "Secret $secret_name already exists, updating..."
                aws secretsmanager update-secret --secret-id "$secret_name" --secret-string "$secret_value"
              else
                echo "Creating secret $secret_name..."
                aws secretsmanager create-secret --name "$secret_name" --secret-string "$secret_value"
              fi
            else
              echo "Warning: No value provided for $secret_name"
            fi
          }
          
          # Create secrets if they have values
          create_secret_if_not_exists "lplivings-store/${{ env.ENVIRONMENT }}/stripe-secret-key" "${{ secrets.STRIPE_SECRET_KEY }}"
          create_secret_if_not_exists "lplivings-store/${{ env.ENVIRONMENT }}/stripe-publishable-key" "${{ secrets.STRIPE_PUBLISHABLE_KEY }}"
          create_secret_if_not_exists "lplivings-store/${{ env.ENVIRONMENT }}/google-client-id" "${{ secrets.GOOGLE_CLIENT_ID }}"
          create_secret_if_not_exists "lplivings-store/${{ env.ENVIRONMENT }}/google-sheets-id" "${{ secrets.GOOGLE_SHEETS_ID }}"
          create_secret_if_not_exists "lplivings-store/${{ env.ENVIRONMENT }}/admin-emails" "${{ secrets.ADMIN_EMAILS }}"
          
          # Handle Google credentials separately due to multiline JSON
          if [ -n "${{ secrets.GOOGLE_CREDENTIALS }}" ]; then
            SECRET_NAME="lplivings-store/${{ env.ENVIRONMENT }}/google-credentials"
            if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
              echo "Secret $SECRET_NAME already exists, updating..."
              echo '${{ secrets.GOOGLE_CREDENTIALS }}' | aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string file:///dev/stdin
            else
              echo "Creating secret $SECRET_NAME..."
              echo '${{ secrets.GOOGLE_CREDENTIALS }}' | aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string file:///dev/stdin
            fi
          fi

      - name: SAM Build and Deploy
        run: |
          cd backend
          sam build
          sam deploy \
            --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
            --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              GoogleClientId=placeholder \
              GoogleSheetsId=placeholder \
              GoogleCredentials=placeholder \
              StripeSecretKey=placeholder \
              AdminEmails=placeholder \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API URL
        id: api-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name lplivings-ecommerce-${{ env.ENVIRONMENT }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    outputs:
      api_url: ${{ steps.api-url.outputs.api_url }}

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Get Stripe publishable key from AWS Secrets Manager
        id: stripe-key
        run: |
          STRIPE_KEY=$(aws secretsmanager get-secret-value --secret-id "lplivings-store/${{ env.ENVIRONMENT }}/stripe-publishable-key" --query SecretString --output text 2>/dev/null || echo "")
          echo "stripe_key=$STRIPE_KEY" >> $GITHUB_OUTPUT

      - name: Get Google Client ID from AWS Secrets Manager
        id: google-client
        run: |
          GOOGLE_CLIENT_ID=$(aws secretsmanager get-secret-value --secret-id "lplivings-store/${{ env.ENVIRONMENT }}/google-client-id" --query SecretString --output text 2>/dev/null || echo "")
          echo "google_client_id=$GOOGLE_CLIENT_ID" >> $GITHUB_OUTPUT

      - name: Build React app
        env:
          REACT_APP_API_URL: ${{ env.ENVIRONMENT == 'dev' && 'https://api-dev.selfcaretech.com' || 'https://api.selfcaretech.com' }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ steps.google-client.outputs.google_client_id }}
          REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ steps.stripe-key.outputs.stripe_key }}
          REACT_APP_ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          cd frontend
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 and CloudFront
        run: |
          cd frontend
          
          # Deploy to S3
          if [ "${{ env.ENVIRONMENT }}" == "dev" ]; then
            aws s3 sync build/ s3://lplivings-dev-frontend --delete
            aws cloudfront create-invalidation --distribution-id E30P7MQ5S4C3YZ --paths "/*"
          else
            aws s3 sync build/ s3://lplivings-prod-frontend --delete
            aws cloudfront create-invalidation --distribution-id E34LYSJHP1H3XQ --paths "/*"
          fi