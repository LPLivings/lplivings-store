AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: LPLivings Store API Backend

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
  GoogleSheetsId:
    Type: String
    Description: Google Sheets ID for data storage
  GoogleCredentials:
    Type: String
    Description: Google Service Account Credentials (JSON)
    NoEcho: true
  StripeSecretKey:
    Type: String
    Description: Stripe Secret Key for payment processing
    NoEcho: true
  AdminEmails:
    Type: String
    Description: Comma-separated list of admin emails who can delete products
    Default: admin@example.com

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
        GOOGLE_SHEETS_ID: !Ref GoogleSheetsId
        GOOGLE_CREDENTIALS: !Ref GoogleCredentials
        S3_BUCKET: !Ref ProductImagesBucket
        ADMIN_EMAILS: !Ref AdminEmails
    Tags:
      Project: LPLivings-Store
      Environment: !Ref Environment

Resources:
  # S3 Bucket for product images
  ProductImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'lplivings-product-images-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - '*'
      Tags:
        - Key: Project
          Value: LPLivings-Store
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  ECommerceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: NONE

  # Lambda Functions
  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: upload_url.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ProductImagesBucket
      Events:
        GetUploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /upload-url
            Method: GET
        OptionsUploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /upload-url
            Method: OPTIONS

  AnalyzeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: analyze_image.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ProductImagesBucket
        - RekognitionDetectOnlyPolicy: {}
      Events:
        AnalyzeImage:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /analyze-image
            Method: POST
        OptionsAnalyzeImage:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /analyze-image
            Method: OPTIONS

  ProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: products.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ProductImagesBucket
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /products
            Method: GET
        PostProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /products
            Method: POST
        DeleteProduct:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /products/{id}
            Method: DELETE
        OptionsProducts:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /products
            Method: OPTIONS
        OptionsProductsId:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /products/{id}
            Method: OPTIONS

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: auth.lambda_handler
      Events:
        PostAuth:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /auth
            Method: POST
        OptionsAuth:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /auth
            Method: OPTIONS

  PaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: payment.lambda_handler
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
      Events:
        CreatePaymentIntent:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /create-payment-intent
            Method: POST
        ConfirmPayment:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /confirm-payment
            Method: POST
        OptionsPayment1:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /create-payment-intent
            Method: OPTIONS
        OptionsPayment2:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /confirm-payment
            Method: OPTIONS

  OrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/
      Handler: orders_new.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ProductImagesBucket
      Events:
        GetOrders:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /orders
            Method: GET
        PostOrder:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /orders
            Method: POST
        UpdateOrderStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /orders/{id}
            Method: PUT
        OptionsOrders:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /orders
            Method: OPTIONS
        OptionsOrdersId:
          Type: Api
          Properties:
            RestApiId: !Ref ECommerceApi
            Path: /orders/{id}
            Method: OPTIONS

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ECommerceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
  S3BucketName:
    Description: S3 bucket for product images
    Value: !Ref ProductImagesBucket